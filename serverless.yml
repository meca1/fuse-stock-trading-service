service: fuse-stock-trading-service

frameworkVersion: '3'

plugins:
  - serverless-dotenv-plugin
  - serverless-esbuild
  - serverless-offline

custom:
  esbuild: ${file(./esbuild.config.js)}
  # Dotenv plugin configuration
  dotenv:
    path: ./.env
    include:
      - DB_USERNAME
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST
      - DB_PORT
      - VENDOR_API_URL
      - VENDOR_API_KEY
      - NODE_ENV
      - EMAIL_PROVIDER
      - EMAIL_SENDER
      - REPORT_RECIPIENTS
      - SMTP_HOST
      - SMTP_PORT
      - SMTP_AUTH
      - SMTP_USER
      - SMTP_PASSWORD
    logging: true
  # RDS database configuration
  rds:
    dbName: ${self:provider.environment.DB_NAME}
    dbUsername: ${self:provider.environment.DB_USERNAME}
    dbPassword: ${self:provider.environment.DB_PASSWORD}
    dbInstanceClass: db.t3.micro
    allocatedStorage: 20
    engineVersion: '13.7'
    port: ${self:provider.environment.DB_PORT}
  stockTokensTable: fuse-stock-tokens-${self:provider.stage}
  stockCacheTable: fuse-stock-cache-${self:provider.stage}
  dynamodbEndpoint: ${env:DYNAMODB_ENDPOINT, 'http://localhost:8000'}
  # API Gateway throttling settings
  apiGateway:
    throttling:
      maxRequestsPerSecond: 10
      maxConcurrentRequests: 5

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    NODE_ENV: ${env:NODE_ENV, self:provider.stage}
    # Database environment variables
    DB_USERNAME: ${env:DB_USERNAME, 'postgres'}
    DB_PASSWORD: ${env:DB_PASSWORD, 'postgres'}
    DB_NAME: ${env:DB_NAME, 'fuse_stock_trading_${self:provider.stage}'}
    DB_HOST: ${env:DB_HOST, 'localhost'}
    DB_PORT: ${env:DB_PORT, '5432'}
    # Vendor API environment variables
    VENDOR_API_URL: ${env:VENDOR_API_URL, 'https://api.challenge.fusefinance.com'}
    VENDOR_API_KEY: ${env:VENDOR_API_KEY, 'nSbPbFJfe95BFZufiDwF32UhqZLEVQ5K4wdtJI2e'}
  # IAM permissions to access RDS
  iamRoleStatements:
    - Effect: Allow
      Action:
        - rds:*
      Resource: '*'

functions:
  listStocks:
    handler: src/handlers/stocks/list.handler
    timeout: 30
    events:
      - http:
          path: /stocks
          method: get
          cors: true
           
  getUserPortfolios:
    handler: src/handlers/portfolios/get.handler
    timeout: 30
    events:
      - http:
          path: /users/{userId}/portfolios
          method: get
          cors: true
          request:
            parameters:
              paths:
                userId: true
                
  buyStock:
    handler: src/handlers/portfolios/buy-stock.handler
    timeout: 30
    events:
      - http:
          path: /stocks/{symbol}/buy
          method: post
          cors: true
          request:
            parameters:
              paths:
                symbol: true

  updateStockTokens:
    handler: src/handlers/cron/update-stock-tokens.handler
    timeout: 300 # 5 minutos
    memorySize: 256
    events:
      - schedule:
          name: DailyStockTokenUpdate
          description: 'Trigger daily update of stock tokens'
          rate: cron(0 0 * * ? *) # Se ejecuta todos los días a las 00:00 UTC
          enabled: true
      - http: # Endpoint adicional para pruebas locales
          path: /update-stock-tokens
          method: post
          cors: true
    environment:
      DYNAMODB_TABLE: ${self:custom.stockTokensTable}
      STOCK_CACHE_TABLE: ${self:custom.stockCacheTable}
      DYNAMODB_ENDPOINT: ${self:custom.dynamodbEndpoint}

  dailyReport:
    handler: src/handlers/cron/daily-report.handler
    timeout: 300 # 5 minutos
    memorySize: 512 # Más memoria para procesar reportes grandes
    events:
      - schedule:
          name: DailyTransactionReport
          description: 'Trigger daily transaction report generation and email delivery'
          rate: cron(59 23 * * ? *) # Se ejecuta todos los días a las 23:59 UTC
          enabled: true
      - http: # Endpoint adicional para pruebas locales
          path: /generate-report
          method: post
          cors: true
    environment:
      EMAIL_PROVIDER: smtp # Forzar SMTP para desarrollo local
      EMAIL_SENDER: ${env:EMAIL_SENDER, 'reports@example.com'}
      REPORT_RECIPIENTS: ${env:REPORT_RECIPIENTS, 'admin@example.com'} # Lista separada por comas
      SMTP_HOST: ${env:SMTP_HOST, 'localhost'}
      SMTP_PORT: ${env:SMTP_PORT, '1025'}
      SMTP_AUTH: ${env:SMTP_AUTH, 'false'}
      SMTP_USER: ${env:SMTP_USER, ''}
      SMTP_PASSWORD: ${env:SMTP_PASSWORD, ''}

# AWS CloudFormation resources definition
resources: ${file(./resources/rds.yml)}
