version: '3.8'

services:
  app:
    build: .
    ports:
      - "3000:3000"
      - "3002:3002"  # Puerto para serverless offline
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=stock_trading
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/stock_trading?sslmode=disable
      - DYNAMODB_ENDPOINT=http://dynamodb:8000
      - DYNAMODB_REGION=us-east-1
      - DYNAMODB_ACCESS_KEY_ID=local
      - DYNAMODB_SECRET_ACCESS_KEY=local
    depends_on:
      postgres:
        condition: service_healthy
      dynamodb:
        condition: service_started
    volumes:
      - .:/app
      - /app/node_modules
    command: sh -c "npm install && npm run db:migrate && npm run dynamodb:init && npx serverless offline --stage local --host 0.0.0.0"

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=stock_trading
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/local/init-postgres.sh:/docker-entrypoint-initdb.d/init-postgres.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      
  dynamodb:
    image: amazon/dynamodb-local:latest
    ports:
      - "8000:8000"
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal"
    volumes:
      - dynamodb_data:/home/dynamodblocal

volumes:
  postgres_data:
  dynamodb_data:
